FROM deltics/azdevops-buildagent:os

# Metadata
LABEL author="Jolyon Direnko-Smith"
LABEL description="Adds tooling for building golang microservices in an enterprise environment."

# Set shell for RUN commands
SHELL ["/bin/bash", "--login", "-c"]

# The versions of software to be installed

ENV DOCKER_VERSION=20.10.18
ENV DOTNET_VERSION=6.0
ENV GCC_VERSION=11
ENV GITVERSIONTOOL_VERSION=5.10.3
ENV GO_VERSION=1.19.1
ENV GOSWAGGER_VERSION=0.30.3
ENV HELM_VERSION=3.10.0
ENV JFROGCLI_VERSION=2
ENV JDK_VERSION=11.0.12.7.1
ENV JRE_VERSION=${JDK_VERSION}
ENV KUBECTL_VERSION=1.22.15
ENV MAVEN_VERSION=3.8.6

# Agent capabilities (and aliases)

ENV Docker=${DOCKER_VERSION}
ENV DotNet=${DOTNET_VERSION}
ENV DotNetSdk=${DOTNET_VERSION}
ENV DotNetCore=${DOTNET_VERSION}
ENV DotNetCoreSdk=${DOTNET_VERSION}
ENV DotNetFramework=${DOTNET_VERSION}
ENV DotNetFrameworkSdk=${DOTNET_VERSION}
ENV Gcc=${GCC_VERSION}
ENV GnuC=${GCC_VERSION}
ENV GitVersion=${GITVERSIONTOOL_VERSION}
ENV Go=${GO_VERSION}
ENV GoLang=${GO_VERSION}
ENV GoSwagger=${GOSWAGGER_VERSION}
ENV Helm=${HELM_VERSION}
ENV JFrogCli=${JFROGCLI_VERSION}
ENV Java=${JRE_VERSION}
ENV JavaRuntimeEnvironment=${JRE_VERSION}
ENV Jdk=${JDK_VERSION}
ENV Jre=${JRE_VERSION}
ENV KubeCtl=${KUBECTL_VERSION}
ENV Maven=${MAVEN_VERSION}
ENV Mvn=${MAVEN_VERSION}


# Some tools (e.g. JFrog Cli) are expected to be found in a specific location in 
#  the agent file system.
#
# The agent doesn't set this location up however, so we can do so here
#  even though the agent has yet to be installed.
RUN mkdir -p /azp/_work/_tool
ENV Agent_ToolsDirectory=/azp/_work/_tool


# To make it easier for build and release pipelines to run apt-get,
# configure apt to not require confirmation (assume the -y argument by default)
ENV DEBIAN_FRONTEND=noninteractive
RUN echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/90assumeyes

# Install dotnet 5.0
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-transport-https \
    dotnet-sdk-$DOTNET_VERSION

# Add dotnet tools to path
ENV PATH=$PATH:~/.dotnet/tools


# Install GitVersion (using dotnet tool install)
RUN dotnet tool install --global --version $GITVERSIONTOOL_VERSION GitVersion.Tool


# Download Docker binaries
RUN curl -o docker.tgz -L https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION.tgz \
     && tar -zxvf docker.tgz --directory /usr/local \
     && rm docker.tgz
ENV PATH=$PATH:/usr/local/docker


# Install GoLang
RUN curl -o go.tgz -L https://golang.org/dl/go$GO_VERSION.linux-amd64.tar.gz \
     && tar xzvf go.tgz --directory /usr/local \
     && rm go.tgz
ENV PATH=$PATH:/usr/local/go/bin


# Install Helm
RUN curl -o helm.tar.gz -LsS https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz \
    && tar -zxvf helm.tar.gz \
    && mv linux-amd64/helm /usr/local/bin/helm \
    && rm -f -R linux-amd64 \
    && rm helm.tar.gz


# Install JDK
RUN curl -o jdk.tar.gz -LO https://corretto.aws/downloads/resources/${JDK_VERSION}/amazon-corretto-${JDK_VERSION}-linux-x64.tar.gz \ 
     && tar -zxvf jdk.tar.gz \
     && mv amazon-corretto-${JDK_VERSION}-linux-x64 jdk \
     && mkdir /usr/local/bin/jdk \
     && mv jdk /usr/local/bin/jdk/11.0.12.7.1 \
     && rm jdk.tar.gz
ENV JAVA_HOME=/usr/local/bin/jdk/11.0.12.7.1


# Install JFrog Cli
RUN JFROGDIR=${Agent_ToolsDirectory}/_jfrog/current; \
     mkdir -p $JFROGDIR; \
     curl -fLsS https://getcli.jfrog.io | bash -s v2; \
     mv jfrog $JFROGDIR


# Install Maven
RUN curl -o maven.tar.gz -LO https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz \
     && tar -zxvf maven.tar.gz \
     && mkdir /usr/local/maven \
     && mv apache-maven-${MAVEN_VERSION} /usr/local/maven/${MAVEN_VERSION} \
     && rm maven.tar.gz
ENV PATH=$PATH:/usr/local/maven/${MAVEN_VERSION}/bin


# Install gcc and header files (NOTE: renaming gcc-11 hardlink as gcc)
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc-$GCC_VERSION \
    libc6-dev
RUN mv /usr/bin/gcc-11 /usr/bin/gcc


# Download go-swagger
RUN download_url=https://github.com/go-swagger/go-swagger/releases/download/v$GOSWAGGER_VERSION/swagger_linux/amd64 \
     && curl -k -o /usr/local/bin/swagger -L'#' "$download_url" \
     && chmod +x /usr/local/bin/swagger


# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/v$KUBECTL_VERSION/bin/linux/amd64/kubectl" \
     && curl -LO "https://dl.k8s.io/v$KUBECTL_VERSION/bin/linux/amd64/kubectl.sha256" \
     && echo "$(<kubectl.sha256) kubectl" | sha256sum --check \
     && chmod +x kubectl \
     && mv kubectl /usr/local/bin


# Install additional tools
COPY .tools /usr/local/bin


# Install libxml2
RUN apt-get update && apt-get install -y --no-install-recommends \
    libxml2
